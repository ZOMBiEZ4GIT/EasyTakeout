name: Build Windows Executable

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags
  pull_request:
    paths:
      - 'app/**'
      - 'packaging/**'
      - '.github/workflows/build-windows.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  PYTHON_VERSION: '3.9'
  APP_NAME: 'EasyTakeout'

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-build-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Prepare build environment
      run: |
        # Create build directory
        mkdir build-output
        mkdir build-output\logs
        
        # Copy additional files
        copy docs\*.md build-output\
        copy LICENSE build-output\
        copy README.md build-output\
        
    - name: Build executable with PyInstaller
      run: |
        cd packaging
        pyinstaller pyinstaller.spec --clean --noconfirm
        
    - name: Test executable
      run: |
        cd packaging\dist
        # Test that the executable can start (quick smoke test)
        timeout /t 5 /nobreak > nul & taskkill /f /im EasyTakeout.exe 2>nul || start /wait /b EasyTakeout.exe --version
        
    - name: Prepare release artifacts
      run: |
        # Create release directory
        mkdir release
        
        # Copy executable and related files
        copy packaging\dist\EasyTakeout.exe release\
        copy docs\*.md release\
        copy LICENSE release\
        copy README.md release\
        copy CHANGELOG.md release\
        
        # Create CLI batch file for easy access
        echo @echo off > release\merge_takeout.bat
        echo python "%~dp0cli\merge_takeout.py" %* >> release\merge_takeout.bat
        
    - name: Create ZIP archive
      run: |
        cd release
        powershell Compress-Archive -Path * -DestinationPath "../${{ env.APP_NAME }}-windows-portable.zip"
        
    - name: Setup Inno Setup
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # Download and install Inno Setup
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "inno-setup-installer.exe"
        Start-Process -FilePath "inno-setup-installer.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        
    - name: Build Windows installer
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # Add Inno Setup to PATH
        $env:PATH += ";C:\Program Files (x86)\Inno Setup 6"
        
        # Build installer
        cd packaging
        iscc inno-setup.iss
        
        # Copy installer to release directory
        copy dist\*.exe ..\${{ env.APP_NAME }}-setup.exe
        
    - name: Calculate checksums
      run: |
        cd release
        certutil -hashfile "${{ env.APP_NAME }}-windows-portable.zip" SHA256 > checksums.txt
        if (Test-Path "../${{ env.APP_NAME }}-setup.exe") {
          certutil -hashfile "../${{ env.APP_NAME }}-setup.exe" SHA256 >> checksums.txt
        }
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-builds
        path: |
          ${{ env.APP_NAME }}-windows-portable.zip
          ${{ env.APP_NAME }}-setup.exe
          release/checksums.txt
        retention-days: 30
        
    - name: Upload portable build
      uses: actions/upload-artifact@v3
      with:
        name: windows-portable
        path: release/*
        retention-days: 7
        
  test-build:
    name: Test Windows Build
    runs-on: windows-latest
    needs: build-windows
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-portable
        path: test-build/
        
    - name: Test portable version
      run: |
        cd test-build
        
        # Test executable launches
        $process = Start-Process -FilePath "EasyTakeout.exe" -ArgumentList "--version" -PassThru -WindowStyle Hidden
        $process.WaitForExit(10000)  # Wait up to 10 seconds
        
        if ($process.ExitCode -eq 0) {
          Write-Host "✅ Executable test passed"
        } else {
          Write-Host "❌ Executable test failed"
          exit 1
        }
        
    - name: Test documentation files
      run: |
        cd test-build
        
        # Check that required files exist
        $requiredFiles = @("USER_GUIDE.md", "TROUBLESHOOTING.md", "README.md", "LICENSE")
        
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Host "❌ Missing file: $file"
            exit 1
          } else {
            Write-Host "✅ Found file: $file"
          }
        }
        
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, test-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-builds
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Create release notes
      run: |
        # Extract latest changelog entry
        sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | sed '$d' > release-notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: EasyTakeout v${{ steps.version.outputs.VERSION }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          ${{ env.APP_NAME }}-windows-portable.zip
          ${{ env.APP_NAME }}-setup.exe
          checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
